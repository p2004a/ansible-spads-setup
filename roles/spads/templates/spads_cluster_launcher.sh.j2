#!/bin/bash
{
# This brace above is important: https://stackoverflow.com/questions/2285403/how-to-make-shell-scripts-robust-to-source-being-changed-as-they-run/2358432#2358432


# Some notes on cluster launchers:
# Documentation: https://springrts.com/phpbb/viewtopic.php?p=596209#p596209
# IMPORTANT: AutoRegister;ClusterManager plugins must be present and loaded!
# CMD_registationEmail: 
#    the email address used to register each cluster instance username automatically, note 
#    that the cluster instance needs admin powers on uberserver to autoregister new accounts
# CMD_baseGamePort:
#    the port the dedicated spring server will run on, should be forwarded or open, and all 
#    instances will use increasing numbers of this host 
#    (e.g. host 4 will use CMD_baseGamePort+4, e.g. 53200)
# CMD_baseAutoHostPort: 
#    the port that SPADS will use to comminicate with the dedicated server, will be used 
#    incrementally for instances, but does not have to be open to outside. Make sure the port 
#    ranges do not overlap with baseGamePort
# CMD_lobbyLogin: 
#    the username of the cluster manager instance
# CMD_lobbyPassword: 
#    the password of the cluster manager instance in plaintext
# if your engine is located here: 
# /home/eru/spads/var/spring/spring_bar_.BAR.104.0.1-1714-g321b911_linux-64-minimal-portable/ 
# then see the two presets below: 
# CMD_enginesBaseDir: 
#    the path to the base dir of the engine, with trailing slash, e.g.
#    CMD_enginesBaseDir=/home/eru/spads/var/spring/ 
# CMD_engineDir: 
#    the name of the directory where current engine is, with trailing slash, e.g.: 
#    spring_bar_.BAR.104.0.1-1714-g321b911_linux-64-minimal-portable/
# CMD_springDataDir: 
#    where the maps and game is located, with trailing slash, e.g.: 
#    /home/eru/spads/var/spring/data
# CMD_localLanIp: 
#    if you plan to play from the same LAN as the autohosts are located, you need to specify this, 
#    e.g. 192.168.1.102
# CMD_hostRegion:
#    The region name of the hosted battle, will be put into the battleName hosting preset in 
#    hostingpresets.conf like:  
#    battleName:%CMD_hostRegion%%ClustInstNb2% 
#    e.g. CMD_hostRegion="EU - " with the quotes and the spaces will be EU - 02 for instance 2
# Dont forget the trailing backslashes at the ends of lines!

perl ../spads.pl spads_cluster.conf \
	CMD_lobbyLogin=$SPADS_LOBBY_LOGIN \
	CMD_spadsChannel={{ spads_channel }} \
	CMD_lobbyPassword=$SPADS_LOBBY_PASSWORD \
	CMD_lobbyHost={{ spads_lobbyHost }} \
	CMD_registrationEmail=$SPADS_REGISTRATION_EMAIL \
	CMD_baseGamePort={{ spads_baseGamePort }} \
	CMD_baseAutoHostPort={{ spads_baseAutoHostPort }} \
	CMD_hostRegion={{ spads_hostRegion }} \
	CMD_enginesBaseDir={{spads_enginesBaseDir }} \
	CMD_engineDir={{ spads_engineDir }} \
	CMD_springDataDir={{ spads_springDataDir }} \
	CMD_endGameCommandPath={{ spads_endGameCommandPath }} \
	CMD_localLanIp={{ spads_localLanIp }} \
	CMD_maxInstances={{ spads_maxInstances }} \
	CMD_targetSpares={{ spads_targetSpares }} \
	CMD_clusters={{ spads_clusters }} \
	CMD_hostIp={{ spads_hostIp }} \
	CMD_autoLoadPlugins={{ spads_autoLoadPlugins }} \
	&


# The section below handles the spads manager process when running as a systemd
# service. We handle:
#   - SIGHUP: reloads SPADS by just restarting the manager and not touching
#     the invividual rooms.
#   - SIGINT and SIGTERM: it sends SIGTERM to manager and all the rooms. Then it
#     waits for all of them to exit. This effectively works like !quit and allows
#     the ongoing games to finish.
# We also send systemd notifications to indicate the current status of SPADS.

manager_pid=$!

spads_instance_pattern='spads.pl.*InstanceName='
engine_pattern='spring-dedicated'
inactive_stop_timeout=60

reload=false

trap 'script_interrupted=true; reload=true; kill $manager_pid;' SIGHUP
trap 'script_interrupted=true; kill $manager_pid;' SIGINT SIGTERM

# Helper function for executing pkill,pidwait,pgrep for all processes
# in the same cgroup as the current process. Each systemd service has
# it's own cgroup.
function child_ {
	# TODO: Actually use --cgroup flag once we are on the fresher system like
	#       current stable Debian 12 that has it.
	# "$1" --cgroup $(cat /proc/$$/cgroup | cut -b 4-) -f "${@:2}"
	"$1" -f "${@:2}"
}

systemd-notify --ready --status="SPADS started"

# Send status updates every 10 seconds to systemd.
(
	running=true
	sleep_pid=0
	trap 'running=false; kill $sleep_pid' SIGTERM
	while [[ $running = true ]]; do
		spads_count=$(child_ pgrep $spads_instance_pattern | wc -l)
		games_count=$(child_ pgrep $engine_pattern | wc -l)
		systemd-notify --status="Instances: $spads_count Running games: $games_count"
		sleep 10 &
		sleep_pid=$!
		wait $sleep_pid
	done
) &
status_loop_pid=$!

# The trap sets script_interrupted=true so that we know when to continue waiting
script_interrupted=true
while [[ $script_interrupted = true ]]; do
	script_interrupted=false
	wait $manager_pid
	manager_exit_code=$?
	# If it was SIGTERM, that's WAI
	if (( manager_exit_code == 143 )); then
		manager_exit_code=0
	fi
done

kill $status_loop_pid
wait $status_loop_pid

if [[ $reload = true ]]; then
	if (( $manager_exit_code != 0 )); then
		exit $manager_exit_code
	fi

	systemd-notify --status="Waiting $inactive_stop_timeout seconds for inactive instances to stop..."
	sleep $(( $inactive_stop_timeout + 5 ))

	# TODO: for Type=notify-reload, --reloading arg available only since systemd v253
	systemd-notify --status="Restarting SPADS manager..."
	exec "$0"
else
	# TODO: for Type=notify-reload, --stopping arg available only since systemd v253
	systemd-notify --status="Waiting for room SPADS instances to exit..."
	child_ pkill $spads_instance_pattern

	# TODO: pidwait is broken on Debian 11... https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=1006395
	#       so we do manual loop over proc...
	# child_ pidwait $spads_instance_pattern

	for pid in $(child_ pgrep $spads_instance_pattern); do
		while [[ -f /proc/$pid/comm ]]; do
			sleep 1
		done
	done

	systemd-notify --status="Exiting"
	exit $manager_exit_code
fi

}
